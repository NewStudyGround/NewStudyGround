name: Java CI with Gradle

on:
  pull_request:
    branches: [ back ]
  push:
    branches: [ back ]

jobs:
  build:

    runs-on: ubuntu-latest

    env:
      working-directory: ./server    #CI가 시작될 환경

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'zulu'
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        working-directory: ${{env.working-directory}}

      # 이전에 빌드된 파일 삭제하고 새로운 빌드
      # 테스트 건너 뛰기
      - name: Build with Gradle
        run: ./gradlew clean build -x test
        working-directory: ${{env.working-directory}}

      # 도커 허브 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      # 도커 빌드 & 푸쉬
      - name: Build and push Docker image
        working-directory: ./server    # 스텝 실행을 위한 올바른 작업 디렉토리 설정
        run: |
          docker build -t ***/studyground:${GITHUB_SHA::7} -f Dockerfile . # 여기서 Dockerfile 경로를 수정합니다.
          docker push ***/studyground:${GITHUB_SHA::7}
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Zulu_jdk/11.0.21-9/x64

      # 서버에 배포할 때 필요한 환경변수 파일 복사해서 넣어주기
      # 명령어에 직접 민감한 정보 넣을 수 없음
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV_VARS }}" > .env
        working-directory: ${{env.working-directory}}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Start Session Manager session
        run: aws ssm start-session --target ${{ secrets.AWS_INSTANCE_ID }}

      - name: Deploy to Server
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ap-northeast-2
        run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.AWS_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --parameters "commands=[
              'if sudo docker ps -a --format \\'{{.Names}}\\' | grep -q \'^server$\\'; then',
              '  sudo docker stop server',
              '  sudo docker rm server',
              'fi',
              'sudo docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/studyground:${GITHUB_SHA::7}',
              'sudo docker run -e TZ=Asia/Seoul --env-file .env -d --name server -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/server:${GITHUB_SHA::7}'
            ]" \
            --output text
